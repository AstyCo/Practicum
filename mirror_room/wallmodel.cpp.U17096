#include "wallmodel.h"

WallModel::WallModel(const QList<Wall> &initWalls, QObject *parent)
    : QAbstractItemModel(parent)
{
    walls = initWalls;
}

QVariant WallModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    // FIXME: Implement me!
    switch (section)
    {
    case 0:
        return "zagolovok 1";
    case 1:
        return "zagolovok 2";
    }
    return QVariant();
}


QModelIndex WallModel::index(int row, int column, const QModelIndex &parent) const
{
    if (!hasIndex(row, column, parent))
        return QModelIndex();

    if (!parent.isValid()) {
        return createIndex(row, column, row * 2);
    }
    else {
        return createIndex(row, column, parent.row() * 2 + 1);
    }
}

QModelIndex WallModel::parent(const QModelIndex &index) const
{
    if (!index.isValid())
        return QModelIndex();

    if (!index.internalId() % 2)
        return QModelIndex();

    return WallModel::index(index.internalId()/2, 0, QModelIndex());
}

int WallModel::rowCount(const QModelIndex &parent) const
{
    if (parent.isValid()) {
        if (parent.parent().isValid())
            return 0;
        return AttributeRowCnt;
    }
    return walls.size();
}

int WallModel::columnCount(const QModelIndex &parent) const
{
    if (!parent.isValid())
        return 0;

    if (!parent.parent().isValid()) {
        return 2;
    }
    return 2;
}

QVariant WallModel::data(const QModelIndex &index, int role) const
{
    if (!index.isValid())
        return QVariant();

    if (role = Qt::DisplayRole) {


    }

    // FIXME: Implement me!
    return QVariant();
}

bool WallModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (data(index, role) != value) {
        // FIXME: Implement me!
        emit dataChanged(index, index, QVector<int>() << role);
        return true;
    }
    return false;
}

Qt::ItemFlags WallModel::flags(const QModelIndex &index) const
{
    if (!index.isValid())
        return Qt::NoItemFlags;

    return Qt::ItemIsEditable; // FIXME: Implement me!
}
